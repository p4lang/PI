// Copyright (c) 2016, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/rpc/status.proto";
import "p4/config/p4info.proto";

// P4_14 spec: http://p4.org/wp-content/uploads/2015/04/p4-latest.pdf

// This package and its contents are a work-in-progress.

package p4;

service P4Runtime {
  // Update one or more P4 entities on the target.
  rpc Write(WriteRequest) returns (WriteResponse) {
  }
  // Read one or more P4 entities from the target.
  rpc Read(ReadRequest) returns (stream ReadResponse) {
  }

  // Sets the P4 fowarding-pipeline config.
  rpc SetForwardingPipelineConfig(SetForwardingPipelineConfigRequest)
      returns (SetForwardingPipelineConfigResponse) {
  }
  // Gets the current P4 fowarding-pipeline config.
  rpc GetForwardingPipelineConfig(GetForwardingPipelineConfigRequest)
      returns (GetForwardingPipelineConfigResponse) {
  }

  // Represents the bidirectional stream between the controller and the
  // switch (initiated by the controller), and is managed for the following
  // purposes: - connection initiation through master arbitration -
  // indicating switch session liveness: the session is live when switch
  // sends
  //   a positive master arbitration update to the controller, and is
  //   considered dead when either the stream breaks or the switch sends a
  //   negative update for master arbitration
  // - the controller sending/receiving packets to/from the switch
  rpc StreamChannel(stream StreamMessageRequest)
      returns (stream StreamMessageResponse) {
  }
}

//------------------------------------------------------------------------------
message WriteRequest {
  uint64 device_id = 1;
  Uint128 election_id = 2;
  repeated Update updates = 3;
}

message WriteResponse {
}

message ReadRequest {
  uint64 device_id = 1;
  repeated Entity entities = 2;
}

message ReadResponse {
  repeated Entity entities = 1;
  // Set to true if no responses will follow this one.
  bool complete = 2;
}

message Update {
  enum Type {
    UNSPECIFIED = 0;
    INSERT = 1;
    MODIFY = 2;
    DELETE = 3;
  }
  Type type = 1;
  Entity entity = 2;
}

message Entity {
  oneof entity {
    ExternEntry extern_entry = 1;
    TableEntry table_entry = 2;
    ActionProfileMember action_profile_member = 3;
    ActionProfileGroup action_profile_group = 4;
    MeterEntry meter_entry = 5;
    DirectMeterEntry direct_meter_entry = 6;
    CounterEntry counter_entry = 7;
    DirectCounterEntry direct_counter_entry = 8;
  }
}

message ExternEntry {
  // the extern_type_id is assigned during compilation. It is likely that this
  // id will in fact come from a P4 annotation to the extern declaration and
  // that each vendor will receive a prefix to avoid collisions.
  uint32 extern_type_id = 1;
  uint32 extern_id = 2;  // id of the instance
  google.protobuf.Any entry = 3;
}

// From Section 11 of P4_14 spec:
// At run time, the table entry insert operation (not part of P4) must specify:
// - Values for each field specified in the reads entry.
// - The name of the action from the action_specification or the
//   action_profile_specification and the parameters to be passed to the action
//   function when it is called.
message TableEntry {
  uint32 table_id = 1;
  repeated FieldMatch match = 2;
  TableAction action = 3;
  int32 priority = 4;              // ignored unless match => TCAM
  uint64 controller_metadata = 5;  // cookie
}

// field_match_type ::= exact | ternary | lpm | range | valid
message FieldMatch {
  uint32 field_id = 1;

  message Exact {
    bytes value = 1;
  }
  message Ternary {
    bytes value = 1;
    bytes mask = 2;
  }
  message LPM {
    bytes value = 1;
    int32 prefix_len = 2;  // in bits
  }
  message Range {
    int32 low = 1;
    int32 high = 2;
  }
  message Valid {
    bool value = 1;
  }

  oneof field_match_type {
    Exact exact = 2;
    Ternary ternary = 3;
    LPM lpm = 4;
    Range range = 6;
    Valid valid = 7;
  }
}

// table_actions ::= action_specification | action_profile_specification
message TableAction {
  oneof type {
    Action action = 1;
    uint32 action_profile_member_id = 2;
    uint32 action_profile_group_id = 3;
  }
}

message Action {
  uint32 action_id = 1;
  message Param {
    uint32 param_id = 2;
    bytes value = 3;
  }
  repeated Param params = 4;
}

//------------------------------------------------------------------------------
message ActionProfileMember {
  uint32 action_profile_id = 1;
  uint32 member_id = 2;
  Action action = 3;
}

//------------------------------------------------------------------------------
message ActionProfileGroup {
  uint32 action_profile_id = 1;
  uint32 group_id = 2;
  enum Type {
    UNSPECIFIED = 0;
    SELECT = 1;
    FAST_FAILOVER = 2;
  }
  Type type = 3;
  message Member {
    uint32 member_id = 1;
    int32 weight = 2;
    uint32 watch = 3;
  }
  repeated Member members = 4;
  int32 max_size = 5;
}

//------------------------------------------------------------------------------
// For WriteRequest, Update.Type has following semantics:
//  - INSERT: Insert the cell in the meter array (with given configuration)
//  - MODIFY: Modify the meter cell configuration
//  - DELETE: Delete the meter cell (i.e. reset the meter configuration)
// For ReadRequest, the scope is defined as follows:
// - All meter cells for all meters if meter_id = 0 (default).
// - All meter cells for given meter_id if index = 0 (default).
message MeterEntry {
  uint32 meter_id = 1;
  int64 index = 2;
  MeterConfig config = 3;
}

//------------------------------------------------------------------------------
// For WriteRequest, Update.Type has following semantics:
//  - INSERT: Insert the cell in the meter array (with given configuration)
//  - MODIFY: Modify the meter cell configuration
//  - DELETE: Delete the meter cell (i.e. reset the meter configuration)
// For ReadRequest, the scope is defined as follows:
// - All meter cells for all meters if meter_id = 0 (default).
// - All meter cells for given meter_id if table_entry.match is empty.
message DirectMeterEntry {
  uint32 meter_id = 1;
  // The associated table entry match.
  // table_entry.action is ignored. Other fields specify the match.
  TableEntry table_entry = 2;
  MeterConfig config = 3;
}

// Modeled as RFC 2698: A Two Rate Three Color Marker (trTCM)
// The trTCM meters a packet stream and marks its packets based on two rates,
// Peak Information Rate (PIR) and Committed Information Rate (CIR), and their
// associated burst sizes to be either green, yellow, or red.  A packet is
// marked red if it exceeds the PIR.  Otherwise it is marked either yellow or
// green depending on whether it exceeds or doesn't exceed the CIR.
//
// TODO: This is not metering protocol-independent!
message MeterConfig {
  // Committed information rate (units per sec)
  int64 cir = 4;
  // Committed burst size
  int64 cburst = 5;
  // Peak information rate (units per sec)
  int64 pir = 6;
  // Peak burst size
  int64 pburst = 7;
}

//------------------------------------------------------------------------------
// For WriteRequest, Update.Type has following semantics:
//  - INSERT: Insert a cell in the counter array (with given data)
//  - MODIFY: Modify the counter cell data
//  - DELETE: Delete the counter cell (i.e. reset the counter data)
// For ReadRequest, the scope is defined as follows:
// - All counter cells for all meters if counter_id = 0 (default).
// - All counter cells for given counter_id if index = 0 (default).
message CounterEntry {
  uint32 counter_id = 1;
  int64 index = 2;
  CounterData data = 3;
}

//------------------------------------------------------------------------------
// For WriteRequest, Update.Type has following semantics:
//  - INSERT: Insert a cell in the counter array (with given data)
//  - MODIFY: Modify the counter cell data
//  - DELETE: Delete the counter cell (i.e. reset the counter data)
// For ReadRequest, the scope is defined as follows:
// - All counter cells for all meters if counter_id = 0 (default).
// - All counter cells for given counter_id if table_entry.match is empty.
message DirectCounterEntry {
  uint32 counter_id = 1;
  // The associated table entry match.
  // table_entry.action is ignored. Other fields specify the match.
  TableEntry table_entry = 2;
  CounterData data = 3;
}

message CounterData {
  int64 byte_count = 1;
  int64 packet_count = 2;
}

//------------------------------------------------------------------------------
message StreamMessageRequest {
  oneof update {
    MasterArbitrationUpdate arbitration = 1;
    PacketOut packet = 2;
  }
}

// Packet sent from the controller to the switch.
message PacketOut {
  bytes payload = 1;
  oneof pipeline {
    uint32 egress_physical_port = 2;
    IngressPipelineSpec ingress_pipeline_spec = 3;
  }
}

message IngressPipelineSpec {
  // Ingress port to associate with the packet.
  uint32 ingress_port = 1;
}

message StreamMessageResponse {
  oneof update {
    MasterArbitrationUpdate arbitration = 1;
    PacketIn packet = 2;
  }
}

// Packet sent from the switch to the controller.
message PacketIn {
  bytes payload = 1;
  uint32 ingress_physical_port = 2;
  uint32 ingress_logical_port = 3;
}

message MasterArbitrationUpdate {
  uint64 device_id = 1;
  // The stream RPC with the highest election_id is the master. The 'master'
  // controller instance populates this with its latest election_id. Switch
  // populates with the highest election ID it has received from all connected
  // controllers.
  Uint128 election_id = 2;
  // Switch populates this with OK for the client that is the master, and with
  // an error status for all other connected clients (at every mastership
  // change). The controller does not populate this field.
  .google.rpc.Status status = 3;
}

message Uint128 {
  // Highest 64 bits of a 128 bit number.
  uint64 high = 1;
  // Lowest 64 bits of a 128 bit number.
  uint64 low = 2;
}

//------------------------------------------------------------------------------
message SetForwardingPipelineConfigRequest {
  enum Action {
    UNSPECIFIED = 0;
    VERIFY = 1;
    VERIFY_AND_SAVE = 2;
    VERIFY_AND_COMMIT = 3;
    COMMIT = 4;
  }
  Action action = 1;
  repeated ForwardingPipelineConfig configs = 2;
}

message SetForwardingPipelineConfigResponse {
}

message ForwardingPipelineConfig {
  uint64 device_id = 1;
  config.P4Info p4info = 2;
  // Target-specific P4 configuration.
  bytes p4_device_config = 3;
}

message GetForwardingPipelineConfigRequest {
  repeated uint32 device_ids = 1;
}

message GetForwardingPipelineConfigResponse {
  repeated ForwardingPipelineConfig configs = 1;
}

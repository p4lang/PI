// Copyright 2013-present Barefoot Networks, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/rpc/status.proto";

// This package is temporary. The Resource service gives access to P4 counters,
// while we come up with a definitive interface that will be part of pi.proto.

package p4.tmp;

service Resource {
  rpc CounterRead(CounterReadRequest) returns (CounterReadResponse) {
  }
  rpc CounterWrite(CounterWriteRequest) returns (CounterWriteResponse) {
  }
}

message CounterData {
  // unclear whether the _valid boolean fields provide any value, or if the P4
  // type of the counter is enough
  int64 bytes = 1;
  bool bytes_valid = 2;
  int64 packets = 3;
  bool packets_valid = 4;
}

message CounterEntry {
  int32 counter_id = 1;
  // we only support indirect counters at the moment
  oneof target {
    int64 index = 2;
  }
  CounterData data = 4;
}

message CounterReadRequest {
  uint64 device_id = 1;
  repeated int32 counter_ids = 2;
}

message CounterReadResponse {
  repeated CounterEntry entries = 1;
}

message CounterWriteRequest {
  int32 device_id = 1;
  repeated CounterEntry entries = 2;
}

message CounterWriteResponse {
  // Corresponds one-to-one to request.updates, and populated only if one or
  // more updates didn't succeed. errors.size == 0 implies success.
  repeated .google.rpc.Status errors = 1;
}
